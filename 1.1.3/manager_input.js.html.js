tui.util.defineNamespace("fedoc.content", {});
fedoc.content["manager_input.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileOverview Input is kind of manager module to support input element events and all of input functions.\n * @author NHN Entertainment FE dev team &lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar util = tui.util;\n\n/**\n * Unit of auto complete component that belong with input element.\n * @constructor\n */\nvar Input = tui.util.defineClass(/**@lends Input.prototype */{\n    /**\n     * keyboard Input KeyCode enum\n     */\n    keyCodeMap: {\n        'TAB': 9,\n        'UP_ARROW': 38,\n        'DOWN_ARROW': 40,\n        'ESC': 27\n    },\n\n    /**\n     * Initialize\n     * @param {Object} autoCompleteObj AutoComplete instance\n     * @param {object} options auto complete options\n     */\n    init: function(autoCompleteObj, options) {\n        this.autoCompleteObj = autoCompleteObj;\n        this.options = options;\n\n        /**\n         * Flag to distinguish new changed inputValue from moving-value in resultList\n         * @type {boolean}\n         */\n        this.isKeyMoving = false;\n\n        // Save elements from configuration.\n        this.$searchBox = this.options.searchBoxElement;\n        this.$toggleBtn = this.options.toggleBtnElement;\n        this.$orgQuery = this.options.orgQueryElement;\n        this.$formElement = this.options.formElement;\n        this.prevValue = '';\n\n        this._attachEvent();\n    },\n\n    /**\n     * Return input element value\n     * @returns {String} Searchbox value\n     */\n    getValue: function() {\n        return this.$searchBox.val();\n    },\n\n    /**\n     * Set keyword to input element\n     * @param {String} str The keyword to set value.\n     */\n    setValue: function(str) {\n        this.$searchBox.val(str);\n    },\n\n    /**\n     * Read config files parameter option and set parameter.\n     * @param {Array|string} subQueryValues The subQueryValues from resultList\n     * @param {number|string} index The index for subQuerySet in config\n     */\n    setParams: function(subQueryValues, index) {\n        if (subQueryValues &amp;&amp; tui.util.isString(subQueryValues)) {\n            subQueryValues = subQueryValues.split(',');\n        }\n\n        if ((!subQueryValues || tui.util.isEmpty(subQueryValues))) {\n            return;\n        }\n        this._createParamSetByType(subQueryValues, index);\n    },\n\n    /**\n     * Create inputElement by type\n     * @param {Array|string} subQueryValues The subQueryValues from resultList\n     * @param {number|string} index The index for subQuerySet in config\n     * @private\n     */\n    _createParamSetByType: function(subQueryValues, index) {\n        var options = this.options,\n            listConfig = options.listConfig[index],\n            subQuerySetIndex = listConfig.subQuerySet,\n            staticParamsIndex = listConfig.staticParams,\n            subQueryKeys = options.subQuerySet[subQuerySetIndex],\n            staticParams = options.staticParams[staticParamsIndex];\n\n        if (!this.hiddens) {\n            this._createParamContainer();\n        }\n\n        util.forEach(subQueryValues, function(value, idx) {\n            var key = subQueryKeys[idx];\n            this.hiddens.append($('&lt;input type=\"hidden\" name=\"' + key + '\" value=\"' + value + '\" />'));\n        }, this);\n\n        this._createStaticParams(staticParams);\n    },\n\n    /**\n     * Create static parameters\n     * @param {string} staticParams Static parameters\n     * @private\n     */\n    _createStaticParams: function(staticParams) {\n        if (!staticParams) {\n            return;\n        }\n\n        staticParams = staticParams.split(',');\n        util.forEach(staticParams, function(value) {\n            var val = value.split('=');\n            this.hiddens.append($('&lt;input type=\"hidden\" name=\"' + val[0] + '\" value=\"' + val[1] + '\" />'));\n        }, this);\n    },\n\n    /**\n     * Create wrapper that become container of hidden elements.\n     * @private\n     */\n    _createParamContainer: function() {\n        this.hiddens = $('&lt;div class=\"hidden-inputs\">&lt;/div>')\n            .hide()\n            .appendTo(this.$formElement);\n    },\n\n    /**\n     * Change toggle button image.\n     * @param {Boolean} isUse 자동완성 사용 여부\n     */\n    setToggleBtnImg: function(isUse) {\n        if (!this.options.toggleImg || util.isEmpty(this.$toggleBtn)) {\n            return;\n        }\n\n        if (isUse) {\n            this.$toggleBtn.attr('src', this.options.toggleImg.on);\n        } else {\n            this.$toggleBtn.attr('src', this.options.toggleImg.off);\n        }\n    },\n\n    /**\n     * Event binding\n     * @private\n     */\n    _attachEvent: function() {\n        this.$searchBox.on({\n            focus: $.proxy(this._onFocus, this),\n            blur: $.proxy(this._onBlur, this),\n            keydown: $.proxy(this._onKeyDown, this),\n            click: $.proxy(this._onClick, this)\n        });\n\n        if (!util.isEmpty(this.$toggleBtn)) {\n            this.$toggleBtn.on('click', $.proxy(this._onClickToggle, this));\n        }\n    },\n\n    /**\n     * Save user query into hidden element.\n     * @param {String} str The string typed by user\n     * @private\n     */\n    _setOrgQuery: function(str) {\n        this.$orgQuery.val(str);\n    },\n\n    /**\n     * Input element onclick event handler\n     * @private\n     * @param {MouseEvent} event Mouse event\n     * @returns {boolean} False if no input-keyword or not use auto-complete\n     */\n    _onClick: function(event) {\n        //입력된 키워드가 없거나 자동완성 기능 사용하지 않으면 펼칠 필요 없으므로 그냥 리턴하고 끝.\n        if (!this.autoCompleteObj.getValue() ||\n            !this.autoCompleteObj.isUseAutoComplete()) {\n            return false;\n        }\n\n        if (!this.autoCompleteObj.isShowResultList()) {\n            this.autoCompleteObj.showResultList();\n        }\n        event.stopPropagation();\n        return true;\n    },\n\n    /**\n     * Input element focus event handler\n     * @private\n     */\n    _onFocus: function() {\n        //setInterval 설정해서 일정 시간 주기로 _onWatch 함수를 실행한다.\n        this.intervalId = setInterval(\n            $.proxy(this._onWatch, this),\n            this.options.watchInterval\n        );\n    },\n\n    /**\n     * Roop for check update input element\n     * @private\n     */\n    _onWatch: function() {\n        var searchBoxValue = this.getValue();\n\n        if (!searchBoxValue) {\n            this.autoCompleteObj.hideResultList();\n            this.prevValue = '';\n            this._setOrgQuery('');\n            return;\n        }\n\n        if (this.isKeyMoving) {\n            this._setOrgQuery(searchBoxValue);\n            this.prevValue = searchBoxValue;\n        } else if (this.prevValue !== searchBoxValue) {\n            this._onChange();\n        }\n    },\n\n    /**\n     * Input element onchange event handler\n     * @private\n     */\n    _onChange: function() {\n        var acObj = this.autoCompleteObj,\n            searchBoxValue = this.getValue();\n\n        if (!this.autoCompleteObj.isUseAutoComplete()) {\n            return;\n        }\n\n        if (acObj.isIdle) {\n            acObj.isIdle = false;\n            acObj.request(searchBoxValue);\n        } else {\n            acObj.readyValue = searchBoxValue;\n            acObj.showResultList();\n        }\n        this.prevValue = searchBoxValue;\n    },\n\n    /**\n     * Input element blur event handler\n     * @private\n     */\n    _onBlur: function() {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    },\n\n    /**\n     * Input element keydown event handler\n     * Set actino by input value\n     * @param {Event} event keyDown Event instance\n     * @private\n     */\n    /*eslint-disable complexity*/\n    _onKeyDown: function(event) {\n        var acObj = this.autoCompleteObj,\n            flow, codeMap, flowMap;\n\n        if (!acObj.isUseAutoComplete() || !acObj.isShowResultList()) {\n            return;\n        }\n\n        codeMap = this.keyCodeMap;\n        flowMap = acObj.flowMap;\n        switch (event.keyCode) {\n            case codeMap.TAB:\n                event.preventDefault();\n                flow = event.shiftKey ? flowMap.NEXT : flowMap.PREV;\n                break;\n            case codeMap.DOWN_ARROW:\n                flow = flowMap.NEXT;\n                break;\n            case codeMap.UP_ARROW:\n                flow = flowMap.PREV;\n                break;\n            case codeMap.ESC:\n                acObj.hideResultList();\n                break;\n            default:\n                break;\n        }\n\n        if (flow) {\n            this.isKeyMoving = true;\n            acObj.moveNextResult(flow);\n        } else {\n            this.isKeyMoving = false;\n        }\n    },\n    /*eslint-enable complexity*/\n\n    /**\n     * Toggle button click event handler\n     * @param {MouseEvent} event Mouse click event\n     * @private\n     */\n    _onClickToggle: function(event) {\n        var curValue = this.getValue();\n        event.stopPropagation();\n\n        if (!this.autoCompleteObj.isUseAutoComplete()) {\n            this.autoCompleteObj.setCookieValue(true);\n            this.autoCompleteObj.changeOnOffText(true);\n            if (!curValue) {\n                return;\n            }\n            if (this.prevValue !== curValue) {\n                this.autoCompleteObj.request(curValue);\n            } else {\n                this.autoCompleteObj.showResultList();\n            }\n        } else {\n            this.autoCompleteObj.setCookieValue(false);\n            this.autoCompleteObj.changeOnOffText(false);\n            this.autoCompleteObj.hideResultList();\n        }\n    }\n});\n\nmodule.exports = Input;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"