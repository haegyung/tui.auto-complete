tui.util.defineNamespace("fedoc.content", {});
fedoc.content["manager_result.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Result is kind of managing module to draw auto complete result list from server and apply template.\n * @author  NHN entertainment FE dev team&lt;dl_javascript@nhnent.com>\n */\n'use strict';\nvar DEFAULT_VIEW_COUNT = 10,\n    WHITE_SPACES = '[\\\\s]*';\n\nvar isEmpty = tui.util.isEmpty,\n    forEach = tui.util.forEach,\n    map = tui.util.map;\n\nvar rIsSpeicalCharacters = /[\\\\^$.*+?()[\\]{}|]/,\n    rWhiteSpace = '/\\s+/g';\n\n/**\n * Unit of auto complete that belong with search result list.\n * Handle the submit data from resultList.\n * See {@link Result.prototype._orderElement} which set the request data from arrow-key input\n * @constructor\n */\nvar Result = tui.util.defineClass(/** @lends Result.prototype */{\n    init: function(autoCompleteObj, options) {\n        this.autoCompleteObj = autoCompleteObj;\n        this.options = options;\n\n        this.$resultList = options.resultListElement;\n        this.viewCount = options.viewCount || DEFAULT_VIEW_COUNT;\n        this.$onOffTxt = options.onoffTextElement;\n        this.mouseOverClass = options.mouseOverClass;\n        this.flowMap = autoCompleteObj.flowMap;\n\n        this._attachEvent();\n        this.$selectedElement = $();\n    },\n\n    /**\n     * Delete last result list\n     * @private\n     */\n    _deleteBeforeElement: function() {\n        this.$selectedElement = $();\n        this.$resultList\n            .hide()\n            .html('');\n    },\n\n    /**\n     * Draw result form api server\n     * @param {Array} dataArr Result data\n     */\n    draw: function(dataArr) {\n        var len = dataArr.length;\n\n        this._deleteBeforeElement();\n        if (len &lt; 1) {\n            this._hideBottomArea();\n        } else {\n            this._makeResultList(dataArr, len);\n        }\n        this.showResultList();\n    },\n\n    /**\n     * Make search result list element\n     * @param {Array} dataArr - Data array\n     * @param {number} len - Length of dataArray\n     * @private\n     */\n    _makeResultList: function(dataArr, len) {\n        var template = this.options.template,\n            listConfig = this.options.listConfig,\n            useTitle = (this.options.useTitle &amp;&amp; !!template.title),\n            tmpl, index, tmplValue, i, data;\n\n        for (i = 0; i &lt; len; i += 1) {\n            data = dataArr[i];\n            index = data.index;\n            tmpl = listConfig[index] ? template[listConfig[index].template] : template.defaults;\n\n            if (data.type === 'title') {\n                tmpl = template.title;\n                if (!useTitle) {\n                    continue;\n                }\n            }\n            tmplValue = this._getTmplData(tmpl.attr, data);\n            $(this._applyTemplate(tmpl.element, tmplValue))\n                .data({\n                    'params': tmplValue.params,\n                    'index': index\n                })\n                .appendTo(this.$resultList);\n        }\n    },\n\n    /**\n     * Make template data\n     * @param {Array} attrs Template attributes\n     * @param {string|Object} data The data to make template\n     * @returns {Object} Template data\n     * @private\n     */\n    _getTmplData: function(attrs, data) {\n        var tmplValue = {},\n            values = data.values || null;\n\n        if (tui.util.isString(data)) {\n            tmplValue[attrs[0]] = data;\n            return tmplValue;\n        }\n\n        forEach(attrs, function(attr, idx) {\n            tmplValue[attr] = values[idx];\n        });\n        if (attrs.length &lt; values.length) {\n            tmplValue.params = values.slice(attrs.length);\n        }\n\n        return tmplValue;\n    },\n\n    /**\n     * Return whether result list show or not\n     * @returns {Boolean}\n     */\n    isShowResultList: function() {\n        return this.$resultList.css('display') === 'block';\n    },\n\n    /**\n     * Hide result list area\n     */\n    hideResultList: function() {\n        this.$resultList.hide();\n        this._hideBottomArea();\n        this.autoCompleteObj.isIdle = true;\n\n        /**\n         * Fired when hide the result list\n         * @api\n         * @event AutoComplete#close\n         */\n        this.autoCompleteObj.fire('close');\n    },\n\n    /**\n     * Show result list area\n     */\n    showResultList: function() {\n        this.$resultList.show();\n        this._showBottomArea();\n    },\n\n    /**\n     * Move focus to next item, change input element value as focus value.\n     * @param {string} flow Direction by key code\n     */\n    moveNextResult: function(flow) {\n        var $selectEl = this.$selectedElement,\n            keyword;\n\n        if (!isEmpty($selectEl)) {\n            $selectEl.removeClass(this.mouseOverClass);\n        }\n        $selectEl = this.$selectedElement = this._orderElement(flow);\n\n        keyword = $selectEl.find('.keyword-field').text();\n        if (keyword) {\n            $selectEl.addClass(this.mouseOverClass);\n            this.autoCompleteObj.setValue(keyword);\n            this._setSubmitOption();\n        } else {\n            this.moveNextResult(flow);\n        }\n    },\n\n    /**\n     * Chage text by whether auto complete use or not\n     * @param {Boolean} isUse on/off 여부\n     */\n    changeOnOffText: function(isUse) {\n        if (isUse) {\n            this.$onOffTxt.text('자동완성 끄기');\n        } else {\n            this.$onOffTxt.text('자동완성 켜기');\n        }\n    },\n\n\n    /**\n     * Attach auto complete event belongs with result list\n     * @private\n     */\n    _attachEvent: function() {\n        this.$resultList.on({\n            mouseover: $.proxy(this._onMouseOver, this),\n            click: $.proxy(this._onClick, this)\n        });\n\n        if (this.$onOffTxt) {\n            this.$onOffTxt.on('click', $.proxy(function() {\n                this._useAutoComplete();\n            }, this));\n        }\n\n        $(document).on('click', $.proxy(function() {\n            this.hideResultList();\n        }, this));\n    },\n\n    /**\n     * Highlight key word\n     * @param {string} tmplStr Template string\n     * @param {Object} dataObj Replace string map\n     * @returns {string}\n     * @private\n     */\n    _applyTemplate: function(tmplStr, dataObj) {\n        tui.util.forEach(dataObj, function(value, key) {\n            if (key === 'subject') {\n                value = this._highlight(value);\n            }\n            tmplStr = tmplStr.replace(new RegExp('@' + key + '@', 'g'), value);\n        }, this);\n\n        return tmplStr;\n    },\n\n    /**\n     * Return applied highlight effect key word\n     * (text: Nike air  /  query : [Nike] / Result : &lt;strong>Nike &lt;/strong>air\n     * text : 'rhdiddl와 고양이' / query :  [rhdiddl, 고양이] / 리턴결과 &lt;strong>rhdiddl&lt;/strong>와 &lt;strong>고양이&lt;/strong>\n     * @param {String} text Input string\n     * @returns {String}\n     * @private\n     */\n    _highlight: function(text) {\n        var queries = this.autoCompleteObj.queries,\n            returnStr;\n\n        tui.util.forEach(queries, function(query) {\n            if (!returnStr) {\n                returnStr = text;\n            }\n            returnStr = this._makeStrong(returnStr, query);\n        }, this);\n        return returnStr || text;\n    },\n\n    /**\n     * Contain text by strong tag\n     * @param {String} text Recommend search data  추천검색어 데이터\n     * @param {String} query Input keyword\n     * @returns {String}\n     * @private\n     */\n    _makeStrong: function(text, query) {\n        var tmpArr, regQuery;\n\n        if (!query || query.length &lt; 1) {\n            return text;\n        }\n\n        tmpArr = query.replace(rWhiteSpace, '').split('');\n        tmpArr = map(tmpArr, function(char) {\n            if (rIsSpeicalCharacters.test(char)) {\n                return '\\\\' + char;\n            }\n            return char;\n        });\n        regQuery = new RegExp(tmpArr.join(WHITE_SPACES), 'gi');\n\n        return text.replace(regQuery, function(match) {\n            return '&lt;strong>' + match + '&lt;/strong>';\n        });\n    },\n\n    /**\n     * Return the first result item\n     * @returns {jQuery}\n     * @private\n     */\n    _getFirst: function() {\n        return this._orderStage(this.flowMap.FIRST);\n    },\n\n    /**\n     * Return the last result item\n     * @returns {jQuery}\n     * @private\n     */\n    _getLast: function() {\n        return this._orderStage(this.flowMap.LAST);\n    },\n\n    /**\n     * Return whether first or last\n     * @param {string} type First/end element type\n     * @returns {jQuery}\n     * @private\n     */\n    _orderStage: function(type) {\n        var flowMap = this.flowMap,\n            $children = this.$resultList.children();\n\n        if (type === flowMap.FIRST) {\n            return $children.first();\n        } else if (type === flowMap.LAST) {\n            return $children.last();\n        }\n\n        return null;\n    },\n\n    /**\n     * Return previous or next element from resultList by direction\n     * @param {string} type The direction type for finding element\n     * @returns {jQuery}\n     * @private\n     */\n    _orderElement: function(type) {\n        var $selectedElement = this.$selectedElement,\n            $order;\n\n        if (type === this.flowMap.NEXT) {\n            $order = $selectedElement.next();\n            return $order.length ? $order : this._getFirst();\n        }\n        $order = $selectedElement.prev();\n        return $order.length ? $order : this._getLast();\n    },\n\n    /**\n     * Set whether auto complete use or not and change switch's state.\n     * @private\n     */\n    _useAutoComplete: function() {\n        var isUse = this.autoCompleteObj.isUseAutoComplete();\n        this.changeOnOffText(isUse);\n        this.autoCompleteObj.setCookieValue(isUse);\n    },\n\n    /**\n     * Show auto complete switch area\n     * @private\n     */\n    _showBottomArea: function() {\n        if (this.$onOffTxt) {\n            this.$onOffTxt.show();\n        }\n    },\n\n    /**\n     * Hide auto complete switch area\n     * @private\n     */\n    _hideBottomArea: function() {\n        if (this.$onOffTxt) {\n            this.$onOffTxt.hide();\n        }\n    },\n\n    /**\n     * Change action attribute of form element and set addition values in hidden type elements.\n     * (Called when click the &lt;li>)\n     * @param {element} [$target] Submit options target\n     * @private\n     *\n     */\n    _setSubmitOption: function($target) {\n        var $selectField = $target ? $($target).closest('li') : this.$selectedElement,\n            paramsString = $selectField.data('params'),\n            index = $selectField.data('index'),\n            config = this.options.listConfig[index],\n            action = this.options.actions[config.action],\n            $formElement = this.options.formElement;\n\n        $formElement.attr('action', action);\n        this._clearSubmitOption();\n        this.autoCompleteObj.setParams(paramsString, index);\n\n        /**\n         * Fired when the user's selected element in result list is changed\n         * @api\n         * @event AutoComplete#change\n         * @param {Object} data - Data for submit\n         *  @param {string} data.index - Index of collection\n         *  @param {string} data.action - Form action\n         *  @param {string} data.params - Parameters\n         */\n        this.autoCompleteObj.fire('change', {\n            index: index,\n            action: action,\n            params: paramsString\n        });\n    },\n\n    /**\n     * Reset form element.\n     * @private\n     */\n    _clearSubmitOption: function() {\n        var $formElement = this.options.formElement;\n\n        $formElement.find('.hidden-inputs').html('');\n    },\n\n    /**\n     * Result list mouseover event handler\n     * @param {Event} event Event instanse\n     * @private\n     */\n    _onMouseOver: function(event) {\n        var $target = $(event.target),\n            $arr = this.$resultList.find('li'),\n            $selectedItem = $target.closest('li');\n\n        $arr.removeClass(this.mouseOverClass);\n        if ($selectedItem.find('.keyword-field').length) {\n            $selectedItem.addClass(this.mouseOverClass);\n        }\n        this.$selectedElement = $target;\n    },\n\n    /**\n     * Result list click evnet handler\n     * Submit form element.\n     * @param {Event} event Event instanse\n     * @private\n     */\n    _onClick: function(event) {\n        var $target = $(event.target),\n            $formElement = this.options.formElement,\n            $selectField = $target.closest('li'),\n            $keywordField = $selectField.find('.keyword-field'),\n            selectedKeyword = $keywordField.text();\n\n        this.autoCompleteObj.setValue(selectedKeyword);\n        if (selectedKeyword) {\n            this._setSubmitOption($target);\n            $formElement.submit();\n        }\n    }\n});\n\nmodule.exports = Result;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"